// PRIMS
#include <iostream>
#include <vector>
#include <climits>

using namespace std;

int minKey(vector<int> &key, vector<bool> &mstSet)
{
    int min = INT_MAX, min_index = -1;

    for (int v = 0; v < key.size(); v++)
    {
        if (!mstSet[v] && key[v] < min)
        {
            min = key[v];
            min_index = v;
        }
    }

    return min_index;
}

void printMST(vector<int> &parent, const vector<vector<int>> &graph, int &totalEdgeWeight)
{
    cout << "Edge \tWeight\n";
    for (int i = 1; i < graph.size(); i++)
    {
        cout << parent[i] << " - " << i << "\t" << graph[i][parent[i]] << "\n";
        totalEdgeWeight += graph[i][parent[i]];
    }
    cout << "\nTotal edge weight: " << totalEdgeWeight << endl;
}

void primMST(const vector<vector<int>> &graph)
{
    int V = graph.size();
    vector<int> parent(V, -1);
    vector<int> key(V, INT_MAX);
    vector<bool> mstSet(V, false);

    key[0] = 0;

    for (int count = 0; count < V - 1; count++)
    {
        int u = minKey(key, mstSet);

        mstSet[u] = true;

        for (int v = 0; v < V; v++)
        {
            if (graph[u][v] && !mstSet[v] && key[v] > graph[u][v])
            {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    int totalEdgeWeight = 0;
    printMST(parent, graph, totalEdgeWeight);
}

int main()
{
    int n;
    cout << "Enter the number of vertices: ";
    cin >> n;

    vector<vector<int>> graph(n, vector<int>(n));

    cout << "Enter the edge weights:\n";
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            int weight;
            cout << "Enter the weight of edge (" << i << ", " << j << "): ";
            cin >> weight;
            graph[i][j] = weight;
            graph[j][i] = weight;
        }
    }

    primMST(graph);

    return 0;
}
