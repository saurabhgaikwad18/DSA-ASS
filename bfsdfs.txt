BFS:

#include <iostream>
#include <queue>
using namespace std;
class Graph {
private:
 int vertices;
 int** adjMatrix;
public:
 Graph(int v) {
 vertices = v;
 adjMatrix = new int*[v];
 for (int i = 0; i < v; i++) {
 adjMatrix[i] = new int[v];
 for (int j = 0; j < v; j++) {
 adjMatrix[i][j] = 0;
 }
 }
 }
 void addEdge(int start, int end) {
 adjMatrix[start][end] = 1;
 adjMatrix[end][start] = 1;
 }
 void BFS(int start) {
 bool* visited = new bool[vertices];
 for (int i = 0; i < vertices; i++) {
 visited[i] = false;
 }
 queue<int> q;
 visited[start] = true;
 q.push(start);
 while (!q.empty()) {
 int vertex = q.front();
 cout << vertex << " ";
 q.pop();
 for (int i = 0; i < vertices; i++) {
 if (adjMatrix[vertex][i] && !visited[i]) {
 visited[i] = true;
 q.push(i);
 }
 }
 }
 delete[] visited;
 }
};
int main() {
 int numVertices, numEdges;
 cout << " Enter the number of vertices: ";
 cin >> numVertices;
 cout << " Vertices are from 0 to " << numVertices-1 << endl;
 Graph g(numVertices);
 cout << " Enter the number of edges: ";
 cin >> numEdges;
 for (int i = 0; i < numEdges; i++) {
 int start, end;
 cout << " Enter edge " << (i + 1) << " (start end): ";
 cin >> start >> end;
 g.addEdge(start, end);
 }
 int startVertex;
 cout << " Enter the starting vertex for traversal: ";
 cin >> startVertex;
 if (startVertex >=numVertices)
 {
 cout << " Invalid starting vertex"<<endl;
 }
 else
 {
 cout << " BFS starting from vertex " << startVertex << ": ";
 g.BFS(startVertex);
 cout << endl;
 }
 return 0;
}

OUTPUT:
 Enter the number of vertices: 6

 Vertices are from 0 to 5

 Enter the number of edges: 8

 Enter edge 1 (start end): 0
1
 Enter edge 2 (start end): 0
3
 Enter edge 3 (start end): 1
2
 Enter edge 4 (start end): 1
4
 Enter edge 5 (start end): 3
4
 Enter edge 6 (start end): 2
4
 Enter edge 7 (start end): 4
5
 Enter edge 8 (start end): 2
5
 Enter the starting vertex for traversal: 0

 BFS starting from vertex 0: 0 1 3 2 4 5 
****************************************************************************************************************************************
DFS:

#include <iostream>
#include <stack>
using namespace std;
class Graph {
private:
 int vertices;
 int** adjMatrix;
public:
 Graph(int v) {
 vertices = v;
 adjMatrix = new int*[v];
 for (int i = 0; i < v; i++) {
 adjMatrix[i] = new int[v];
 for (int j = 0; j < v; j++) {
 adjMatrix[i][j] = 0;
 }
 }
 }
 void addEdge(int start, int end) {
 adjMatrix[start][end] = 1;
 adjMatrix[end][start] = 1;
 }

 void DFS(int start) {
 bool* visited = new bool[vertices];
 for (int i = 0; i < vertices; i++) {
 visited[i] = false;
 }
 stack<int> s;
 s.push(start);
 while (!s.empty()) {
 int vertex = s.top();
 s.pop();
 if (!visited[vertex]) {
 cout << vertex << " ";
 visited[vertex] = true;
 }
 for (int i = 0; i < vertices; i++) {
 if (adjMatrix[vertex][i] && !visited[i]) {
 s.push(i);
 }
 }
 }
 delete[] visited;
 }
};
int main() {
 int numVertices, numEdges;
 cout << " Enter the number of vertices: ";
 cin >> numVertices;
 cout << " Vertices are from 0 to " << numVertices-1 << endl;
 Graph g(numVertices);
 cout << " Enter the number of edges: ";
 cin >> numEdges;
 for (int i = 0; i < numEdges; i++) {
 int start, end;
 cout << " Enter edge " << (i + 1) << " (start end): ";
 cin >> start >> end;
 g.addEdge(start, end);
 }
 int startVertex;
 cout << " Enter the starting vertex for traversal: ";
 cin >> startVertex;
 if (startVertex >=numVertices)
 {
 cout << " Invalid starting vertex"<<endl;
 }
 else
 {
 cout << " DFS starting from vertex " << startVertex << ": ";
 g.DFS(startVertex);
 cout << endl;
 };
 return 0;
} 

OUTPUT:

 Enter the number of vertices: 6

 Vertices are from 0 to 5

 Enter the number of edges: 8

 Enter edge 1 (start end): 0
1
 Enter edge 2 (start end): 0
3
 Enter edge 3 (start end): 1
2
 Enter edge 4 (start end): 1
4
 Enter edge 5 (start end): 3
4
 Enter edge 6 (start end): 2
4
 Enter edge 7 (start end): 4
5
 Enter edge 8 (start end): 2
5
 Enter the starting vertex for traversal: 0

 DFS starting from vertex 0: 0 3 4 5 2 1 