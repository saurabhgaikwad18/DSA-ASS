#include <iostream>
using namespace std;
class node
{
public:
    int value;
    node *prev;
    node *next;
    // constructor
    node(int data)
    {
        value = data;
        prev = NULL;
        next = NULL;
    }
};
class doublelinklist
{
public:
    node *head;
    node *tail;
    // constructor
    doublelinklist()
    {
        head = NULL;
        tail = NULL;
    }

    void insertathead(int value)
    {
        node *new_node = new node(value);
        if (head == NULL) // node empty ahe mnje tail pn node
        {
            head = new_node;
            tail = new_node;
            return;
        }
        new_node->next = head;
        head->prev = new_node;
        head = new_node;
        return;
    }
    void insertattail(int value)
    {
        node *new_node = new node(value);
        if (tail == NULL) // empty node
        {
            head = new_node;
            tail = new_node;
            return;
        }
        tail->next = new_node;
        new_node->prev = tail;
        tail = new_node;
        return;
    }
    void insertatpos(int value, int k)
    {
        node *temp = head;
        int count = 1;
        while (count < k - 1)
        {
            temp = temp->next;
            count++;
        }
        // temp is at k-1 position
        node *new_node = new node(value);
        new_node->next = temp->next;
        new_node->prev = temp;
        temp->next = new_node;
        new_node->next->prev = new_node;
        return;
    }

    void deleteatstart()
    {
        if (head == NULL)
            return;
        node *temp = head;
        head = head->next;
        if (head == NULL)
        {
            tail = NULL;
        }
        else
        {
            head->prev = NULL;
        }
        free(temp);
        return;
    }
    void deleteatend()
    {
        if (tail == NULL)
            return; // node empty ahe
        node *temp = tail;
        tail = tail->prev;
        if (tail == NULL)
        {
            head = NULL;
        }
        else
        {
            tail->next = NULL;
        }
        free(temp);
        return;
    }
    void deleteatpos(int k) // k is position
    {
        node *temp = head;
        int count = 1;
        while (count < k)
        {
            temp = temp->next;
            count++;
        }
        // now temp is at k
        temp->prev->next = temp->next;
        temp->next->prev = temp->prev;
        free(temp);
        return;
    }
    void search(int value)
    {
        int flag = 0;
        int count = 0;
        node *temp = head;
        while (temp != NULL)
        {
            if (temp->value == value)
            {
                cout << "Element found at indxpos " << count;
                flag = 1;
                break;
            }
            temp = temp->next;
            count++;
        }
        if (flag == 0)
            cout << "ELement not found ";
    }
    void reverse()
    {
        node *curr = head;
        while (curr != NULL)
        {
            node *next = curr->next;
            curr->next = curr->prev;
            curr->prev = next;
            curr = next;
        }
        // now swap head and tail
        node *new_head = tail;
        tail = head;
        head = new_head;
        return;
    }
    void display()
    {
        node *temp = head;
        while (temp != NULL)
        {
            cout << temp->value << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};
int main()
{
    doublelinklist dll;
    dll.insertathead(4);
    dll.display();
    dll.insertathead(5);
    dll.display();
    dll.insertathead(6);
    dll.display();
    dll.insertathead(9);
    dll.display();
    dll.insertattail(1);
    dll.display();
    dll.insertattail(5);
    dll.display();

    dll.insertatpos(22, 3);

    dll.display();
    dll.deleteatstart();
    dll.display();
    dll.deleteatend();
    dll.display();
    dll.reverse();
    dll.display();
    dll.deleteatpos(2);
    dll.display();
    dll.search(4);
}