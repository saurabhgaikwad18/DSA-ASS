// ASSIGNMENT NO 6
// AVL IMPLEMENTATION
#include <iostream>
using namespace std;

struct Node
{
    int key;
    Node *left;
    Node *right;
    int height;
};

int getHeight(Node *node)
{
    if (node == nullptr)
        return 0;
    return node->height;
}

void updateHeight(Node *node)
{
    if (node == nullptr)
        return;
    node->height = 1 + max(getHeight(node->left), getHeight(node->right));
}

Node *rotateRight(Node *y)
{
    Node *x = y->left;
    Node *T2 = x->right;
    x->right = y;
    y->left = T2;
    updateHeight(y);
    updateHeight(x);
    return x;
}

Node *rotateLeft(Node *x)
{
    Node *y = x->right;
    Node *T2 = y->left;
    y->left = x;
    x->right = T2;
    updateHeight(x);
    updateHeight(y);
    return y;
}

Node *balance(Node *node)
{
    int balanceFactor = getHeight(node->left) - getHeight(node->right);
    if (balanceFactor > 1)
    {
        if (node->key < node->left->key)
        {
            return rotateRight(node);
        }
        else
        {
            node->left = rotateLeft(node->left);
            return rotateRight(node);
        }
    }
    if (balanceFactor < -1)
    {
        if (node->key > node->right->key)
        {
            return rotateLeft(node);
        }
        else
        {
            node->right = rotateRight(node->right);
            return rotateLeft(node);
        }
    }
    return node;
}

Node *insert(Node *root, int key)
{
    if (root == nullptr)
    {
        Node *newNode = new Node{key, nullptr, nullptr, 1};
        return newNode;
    }
    if (key < root->key)
    {
        root->left = insert(root->left, key);
    }
    else if (key > root->key)
    {
        root->right = insert(root->right, key);
    }
    else
    {
        return root;
    }
    updateHeight(root);
    return balance(root);
}

Node *search(Node *root, int key)
{
    if (root == nullptr || root->key == key)
    {
        return root;
    }
    if (key < root->key)
    {
        return search(root->left, key);
    }
    return search(root->right, key);
}

void displayAscending(Node *root)
{
    if (root == nullptr)
        return;
    displayAscending(root->left);
    cout << root->key << " ";
    displayAscending(root->right);
}

int main()
{
    Node *root = nullptr;

    int numElements;
    cout << "Enter the number of elements to insert: ";
    cin >> numElements;

    cout << "Enter the elements to insert:\n";
    for (int i = 0; i < numElements; ++i)
    {
        int element;
        cin >> element;
        root = insert(root, element);
    }

    cout << "Tree in ascending order: ";
    displayAscending(root);
    cout << endl;

    int searchKey;
    cout << "Enter the key to search: ";
    cin >> searchKey;

    Node *result = search(root, searchKey);
    if (result != nullptr)
    {
        cout << "Node with key " << searchKey << " found." << endl;
    }
    else
    {
        cout << "Node with key " << searchKey << " not found." << endl;
    }

    return 0;
}
